esphome:
  name: $devicename

substitutions:
  devicename: "tpms-01"

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

logger:
  level: DEBUG

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

api: 

sensor:
  - platform: template
    name: "$devicename FL Temperature"
    id: ble_fl_temp
    unit_of_measurement: "째C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
  - platform: template
    name: "$devicename FL Pressure"
    id: ble_fl_psi
    unit_of_measurement: "psi"
    icon: "mdi:gauge"
    device_class: "pressure"
    state_class: "measurement"
  - platform: template
    name: "$devicename FL Voltage"
    id: ble_fl_batt
    unit_of_measurement: "V"
    icon: "mdi:battery"
    device_class: "voltage"
    state_class: "measurement"

  - platform: template
    name: "$devicename FR Temperature"
    id: ble_fr_temp
    unit_of_measurement: "째C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
  - platform: template
    name: "$devicename FR Pressure"
    id: ble_fr_psi
    unit_of_measurement: "psi"
    icon: "mdi:gauge"
    device_class: "pressure"
    state_class: "measurement"
  - platform: template
    name: "$devicename FR Voltage"
    id: ble_fr_batt
    unit_of_measurement: "V"
    icon: "mdi:battery"
    device_class: "voltage"
    state_class: "measurement"

  - platform: template
    name: "$devicename RL Temperature"
    id: ble_rl_temp
    unit_of_measurement: "째C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
  - platform: template
    name: "$devicename RL Pressure"
    id: ble_rl_psi
    unit_of_measurement: "psi"
    icon: "mdi:gauge"
    device_class: "pressure"
    state_class: "measurement"
  - platform: template
    name: "$devicename RL Voltage"
    id: ble_rl_batt
    unit_of_measurement: "V"
    icon: "mdi:battery"
    device_class: "voltage"
    state_class: "measurement"

  - platform: template
    name: "$devicename RR Temperature"
    id: ble_rr_temp
    unit_of_measurement: "째C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
  - platform: template
    name: "$devicename RR Pressure"
    id: ble_rr_psi
    unit_of_measurement: "psi"
    icon: "mdi:gauge"
    device_class: "pressure"
    state_class: "measurement"
  - platform: template
    name: "$devicename RR Voltage"
    id: ble_rr_batt
    unit_of_measurement: "V"
    icon: "mdi:battery"
    device_class: "voltage"
    state_class: "measurement"

esp32_ble_tracker:
  scan_parameters:
    active: false

  on_ble_advertise:

    # RR
    - mac_address: !secret rr_mac 
      then:
        - lambda: |-
            for (auto data : x.get_manufacturer_datas()) {
              const char *hexstring = data.uuid.to_string().substr(2,2).c_str();
              const float voltage = (float) strtol(hexstring, NULL, 16) * 0.1;

              id(ble_rr_temp).publish_state(data.data[0]);
              id(ble_rr_psi).publish_state(float(data.data[2]) * 0.145);
              id(ble_rr_batt).publish_state(voltage);
            }

    # RL
    - mac_address: !secret rl_mac 
      then:
        - lambda: |-
            for (auto data : x.get_manufacturer_datas()) {
              const char *hexstring = data.uuid.to_string().substr(2,2).c_str();
              const float voltage = (float) strtol(hexstring, NULL, 16) * 0.1;

              id(ble_rl_temp).publish_state(data.data[0]);
              id(ble_rl_psi).publish_state(float(data.data[2]) * 0.145);
              id(ble_rl_batt).publish_state(voltage);
            }

    # FR
    - mac_address: !secret fr_mac 
      then:
        - lambda: |-
            for (auto data : x.get_manufacturer_datas()) {
              const char *hexstring = data.uuid.to_string().substr(2,2).c_str();
              const float voltage = (float) strtol(hexstring, NULL, 16) * 0.1;

              id(ble_fr_temp).publish_state(data.data[0]);
              id(ble_fr_psi).publish_state(float(data.data[2]) * 0.145);
              id(ble_fr_batt).publish_state(voltage);
            }

    # FL
    - mac_address: !secret fl_mac 
      then:
        - lambda: |-
            for (auto data : x.get_manufacturer_datas()) {
              const char *hexstring = data.uuid.to_string().substr(2,2).c_str();
              const float voltage = (float) strtol(hexstring, NULL, 16) * 0.1;

              id(ble_fl_temp).publish_state(data.data[0]);
              id(ble_fl_psi).publish_state(float(data.data[2]) * 0.145);
              id(ble_fl_batt).publish_state(voltage);
            }
